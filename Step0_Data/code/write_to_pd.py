print("Importing Modules")
import time
import os
import sys
import numpy as np
import pandas as pd
import pyreadr
import torch
import torch.utils.data as data_utils
from torchvision import datasets, transforms
from scvi.dataset import GeneExpressionDataset
import rpy2.robjects as robjects
from rpy2.robjects import pandas2ri
pandas2ri.activate()
readRDS = robjects.r['readRDS']

WORKING_DIR = "/data/leslie/bplee/scBatch"
print("CHANGING PATH:")
sys.path.append(WORKING_DIR)
print("\tWorking dir appended to Sys path.")


class NewRccDatasetSemi(data_utils.Dataset):
    def __init__(self, test_patient, x_dim, train=True):
        self.test_patient = test_patient
        self.train = train
        self.x_dim = x_dim
        self.init_time = time.time()

        if self.train:
            self.train_data, self.train_labels, self.train_domain, self.cell_types, self.patients = self._get_data()
        else:
            self.test_data, self.test_labels, self.test_domain, self.cell_types, self.patients = self._get_data()

    def cell_types_batches(self):
        return self.cell_types, self.patients

    def _get_data(self):
        print('Getting data..')
        readRDS = robjects.r['readRDS']
        pandas2ri.activate()
        print('Loading annotations...')
        annot = readRDS('/data/leslie/krc3004/RCC_Alireza_Sep2020/ccRCC_6pat_cell_annotations_June2020.rds')
        print("Loading raw counts...")
        # raw_counts = readRDS('/data/leslie/bplee/scBatch/Step0_Data/data/200929_raw_counts.rds')
        raw_counts = readRDS('/data/leslie/bplee/scBatch/Step0_Data/data/200929_raw_counts.rds').transpose()
        cell_types = np.unique(annot.cluster_name)
        cell_labels = np.array(annot.cluster_name)
        patient_labels = np.array(annot.Sample)
        gene_names = raw_counts.columns.values # np array
        rtn = pd.DataFrame(raw_counts)
        rtn['cell_label'] = cell_labels
        rtn['patient'] = patient_labels
        
        n_each_cell_type = np.zeros(len(cell_types)).astype(int)
        for i in range(len(cell_types)):
            n_each_cell_type[i] = np.sum(labels == i)

        print('Importing gene expression ds')

        gene_dataset = GeneExpressionDataset()
        gene_dataset.populate_from_data(
            X=np.array(raw_counts),
            batch_indices=batch_indices,
            labels=labels,
            gene_names=gene_names,
            cell_types=cell_types,
            remap_attributes=False
        )
        del raw_counts
        del annot
        gene_dataset.subsample_genes(self.x_dim)


    def __len__(self):
        if self.train:
            return len(self.train_labels)
        else:
            return len(self.test_labels)

    def __getitem__(self, index):
        if self.train:
            x = self.train_data[index]
            y = self.train_labels[index]
            d = self.train_domain[index]
        else:
            x = self.test_data[index]
            y = self.test_labels[index]
            d = self.test_domain[index]

        return x, y, d



if __name__ == "__main__":
    
    readRDS = robjects.r['readRDS']
    pandas2ri.activate()
    print('Loading annotations...')
    annot = readRDS('/data/leslie/krc3004/RCC_Alireza_Sep2020/ccRCC_6pat_cell_annotations_June2020.rds')
    print("Loading raw counts...")
        # raw_counts = readRDS('/data/leslie/bplee/scBatch/Step0_Data/data/200929_raw_counts.rds')
    raw_counts = readRDS('/data/leslie/bplee/scBatch/Step0_Data/data/200929_raw_counts.rds').transpose()
    cell_types = np.unique(annot.cluster_name)
    cell_labels = np.array(annot.cluster_name)
    patient_labels = np.array(annot.Sample)
    gene_names = raw_counts.columns.values # np array
    rtn = pd.DataFrame(raw_counts)
    rtn['cell_type'] = cell_labels
    rtn['patient'] = patient_labels

    rtn.to_pickle('/data/leslie/bplee/scBatch/Step0_Data/data/200930_6pat_raw_counts.pkl')

    # from ForBrennan.DIVA.dataset.rcc_loader_semi_sup import RccDatasetSemi

    # getting training and testing data
    TEST_PATIENT = 4
    X_DIM = 16323# 784 is the magic number for DIVA; 16323 is the max
    X_DIM = 784

    # getting training and testing data
    # data_obj = RccDatasetSemi(test_patient=TEST_PATIENT, x_dim=X_DIM, train=True, test=True, diva=False)

    # new_data_obj = NewRccDatasetSemi(test_patient=TEST_PATIENT, x_dim=X_DIM, train=True)

    annot_filepath = '/data/leslie/krc3004/RCC_Alireza_Sep2020/ccRCC_6pat_cell_annotations_June2020.rds'
    # new_batch_corrected_data = '/data/leslie/krc3004/RCC_Alireza_Sep2020/ccRCC_6pat_June2020.rds'
    raw_counts_filepath = '/data/leslie/bplee/scBatch/Step0_Data/data/200929_raw_counts.rds'

    # annot = readRDS(annot_filepath)
    # raw_counts = readRDS(raw_counts_filepath) # this list of counts was generated by opening the seurat obj in R and saving the raw counts to a df for saveRDS
    # raw_counts = readRDS(raw_counts_filepath).transpose()
    # test = pyreadr.read_r(raw_counts_filepath)[None].transpose()

    # so this contains 31 labels instead of 16

    #data = readRDS(new_batch_corrected_data)

    
